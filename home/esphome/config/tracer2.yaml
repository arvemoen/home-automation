# initialize substitutions (constants)
substitutions:
  device_name: tracer2
  friendly_name: Tracer2    # Prefix for sensor names
  updates: 5min             # Update interval
  altitude: '552'           # Device location in meters above sea level. Used to calculate pressure at sea level.
  self_consumption: '0.012' # Solar charge controller self consumption in amps

# Setup esphome device
esphome:
  name: ${device_name}
  platform: ESP32
  board: esp32thing_plus    # SparkFun Thing Plus - ESP32 WROOM (https://www.sparkfun.com/products/15663)
  on_boot:
    # set epever controller settings at boot
    # make sure priority is lower than setup_priority of modbus_controller
    priority: -100
    then:
      - lambda: |-
          // get local time and sync to controller
          auto time  = id(sntp_time).now();
          int seconds = time.second;
          int minutes = time.minute;
          int hour    = time.hour;
          int day     = time.day_of_month;
          int month   = time.month;
          int year    = time.year;
          esphome::modbus_controller::ModbusController *controller = id(epever);
          if (time.is_valid()) {
            // create the payload
            std::vector<uint16_t> rtc_data = {uint16_t((minutes << 8) | seconds), uint16_t((day << 8) | hour),
                                              uint16_t((year << 8) | month)};
            // Create a modbus command item with the time information as the payload
            esphome::modbus_controller::ModbusCommandItem set_rtc_command =
                esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x9013, 3, rtc_data);
            // Submit the command to the send queue
            epever->queue_command(set_rtc_command);
            ESP_LOGI("ModbusLambda", "EPSOLAR RTC set to %02d:%02d:%02d %02d.%02d.%04d", hour, minutes, seconds, day, month, year);
          } else {
            ESP_LOGI("ModbusLambda", "EPSOLAR RTC not set - Time is not valid");
          };

          // Settings for LiFePO4 4-cell 225Ah battery
          // Bettery specs: https://www.sparelys.no/media/content/pdf/Haichen/HC-12V225Ah-%20heating_BT.pdf
          std::vector<uint16_t> battery_settings1 = {
              0,       // 9000 Battery Type 0 = User
              0x00E1,  // 9001 Battery Capacity = 225AH
              0x0000,  // 9002 Temp compensation 0V /Â°C/2V
              0x05BE,  // 9003 Over Voltage Disconnect Voltage 14.7
              0x05B4,  // 9004 Charging Limit Voltage 14.6
              0x05B4,  // 9005 Over Voltage Reconnect Voltage 14.6
              0x05AA,  // 9006 Equalize Charging Voltage 14.5
              0x05AA,  // 9007 Boost Charging Voltage 14.5
              0x055A,  // 9008 Float Charging Voltage 13.7
              0x0528,  // 9009 Boost Reconnect Charging Voltage 13.2
              0x04D8,  // 900A Low Voltage Reconnect Voltage 12.4
              0x04E2,  // 900B Under Voltage Warning Reconnect Voltage 12.5
              0x04D8,  // 900C Under Voltage Warning Voltage 12.4
              0x04B0,  // 900D Low Voltage Disconnect Voltage 12.0
              0x047E   // 900E Discharging Limit Voltage 11.5
          };
          // Charging management mode
          std::vector<uint16_t> battery_settings2 = {
              0x0000   // 9070 Charging management mode - Voltage compensation (0 - Volt comp., 1 - SOC)
          };
          // Boost and equalization periods
          std::vector<uint16_t> battery_settings3 = {
              0x0000,  // 906B Equalize Duration (min.) 0
              0x006E   // 906C Boost Duration (aka absorb) 110 mins
              // 0x005A   // 906D Discharging percentage - to be set for SOC charging management mode
              // 0x005A   // 906E Charging percentage    - to be set for SOC charging management mode
          };
          //Load control
          std::vector<uint16_t> load_settings = {
              0x0000   // 903D Load controlling mode -  Manual Control
          };
          esphome::modbus_controller::ModbusCommandItem set_battery1_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x9000, battery_settings1.size(), battery_settings1);
          esphome::modbus_controller::ModbusCommandItem set_battery2_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x9070, battery_settings2.size(), battery_settings2);
          esphome::modbus_controller::ModbusCommandItem set_battery3_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x906B, battery_settings3.size(), battery_settings3);
          esphome::modbus_controller::ModbusCommandItem set_load_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x903D, load_settings.size(), load_settings);
          delay(200);
          controller->queue_command(set_battery1_command);
          delay(200);
          controller->queue_command(set_battery2_command);
          delay(200);
          controller->queue_command(set_battery3_command);
          delay(200);
          controller->queue_command(set_load_command);
          delay(200);
          ESP_LOGI("ModbusLambda", "EPSOLAR Battery set");

# Setup time
time:
  - platform: sntp
    timezone: Europe/Oslo
    id: sntp_time
    
# Setup WiFi
wifi:
  reboot_timeout: 10min
  networks:
    - ssid: !secret wifi_ssid_hytta
      password: !secret wifi_password_hytta
      hidden: true
      manual_ip:
        static_ip: !secret tracer2_ip
        gateway: !secret gateway
        subnet: !secret subnet  
        dns1: !secret dns1
        dns2: !secret dns2
    - ssid: !secret wifi_ssid_home
      password: !secret wifi_password_home
      manual_ip:
        static_ip: !secret tracer2_ip
        gateway: !secret gateway
        subnet: !secret subnet  
        dns1: !secret dns1
        dns2: !secret dns2

# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${friendly_name} Fallback Hotspot
    password: !secret ota_password

captive_portal:

# Enable logging 
logger:
  baud_rate: 0   # To avoid conflict with UART0
  level: INFO

# Enable OTA
ota:
  password: !secret ota_password
  
# Enable web server
web_server:
  port: 80
  auth:
    username: !secret web_user
    password: !secret ota_password

# Setup mqtt
mqtt:
  broker: !secret mqtt_broker_external
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: true
  discovery_prefix: !secret mqtt_discovery_prefix
  discovery_retain: true
  on_message:
    # Alternative restart of device
    - topic: ${device_name}/restart
      payload: 'on'
      then:
        - switch.toggle: restart_switch
    
# Setup i2c bus
i2c:
  id: i2c_bus
  scl: SCL
  sda: SDA
  scan: False
  
# Setup UART for tracer RS485
uart:
  id: mod_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 115200
  
# Setup modbus
modbus:
  send_wait_time: 250ms
  id: mod_bus_epever

# Setup modbus controller
modbus_controller:
  - id: epever
    address: 0x1
    modbus_id: mod_bus_epever
    command_throttle: 250ms
    setup_priority: -10
    update_interval: ${updates}
    
# Include packages (files)
packages:  
  tracer-stats: !include tracer/tracer-stats.yaml
  tracer-settings: !include tracer/tracer-settings.yaml
  tracer-real-time: !include tracer/tracer-real-time.yaml
  
# Set up sensors
sensor:
     
  # BME280 temperature+pressure+humidity sensor (i2c)
  - platform: bme280
    address: 0x76
    id: bme280_sensor
    update_interval: ${updates}
    temperature:
      name: ${friendly_name} outside temperature
      id: outside_temperature
      device_class: temperature
      accuracy_decimals: 1
    pressure:
      name: ${friendly_name} outside local pressure
      id: outside_local_pressure
      accuracy_decimals: 1
      internal: true
    humidity:
      name: ${friendly_name} outside humidity
      id: outside_humidity
      device_class: humidity
      accuracy_decimals: 1
      
  # INA219 DC current sensor (i2c) - internal
  - platform: ina219
    address: 0x40
    id: ina219_sensor
    update_interval: ${updates}
    shunt_resistance: 0.1 ohm
    max_voltage: 26.0V
    max_current: 3.2A
    current:
      id: ina219_sensor_current
    power:
      id: ina219_sensor_power
      
  # SCD30 co2+temperature+humidity sensor (i2c)
  - platform: scd30
    id: scd30_sensor
    update_interval:  ${updates}  
    automatic_self_calibration: false
    altitude_compensation: ${altitude}m
    co2:
      name: ${friendly_name} inside co2
      id: inside_co2
      device_class: carbon_dioxide
      accuracy_decimals: 0
    temperature:
      name: ${friendly_name} inside temperature
      id: inside_temperature
      device_class: temperature
      accuracy_decimals: 1
    humidity:
      name: ${friendly_name} inside humidity
      id: inside_humidity
      device_class: humidity
      accuracy_decimals: 1
    
  # Calculated self current consuptions
  - platform: template
    name: ${friendly_name} self current
    id: self_current_comsumption
    lambda: |-
      return id(ina219_sensor_current).state + ${self_consumption};
    update_interval: ${updates}
    unit_of_measurement: "A"
    accuracy_decimals: 2
    icon: mdi:current-dc

  # Calculated self power consuptions
  - platform: template
    name: ${friendly_name} self power
    id: self_power_comsumption
    device_class: power
    lambda: |-
      return id(ina219_sensor_power).state + (id(battery_voltage).state * ${self_consumption});
    update_interval: ${updates}
    unit_of_measurement: "W"
    accuracy_decimals: 1
  
  # Calculated pessure at sea level
  - platform: template
    name: ${friendly_name} outside sea level pressure
    id: outside_sea_level_pressure
    device_class: pressure
    lambda: |-
      const float STANDARD_ALTITUDE = ${altitude}; // in meters above sea level
      return id(outside_local_pressure).state / powf(1 - ((0.0065 * STANDARD_ALTITUDE) /
        (id(outside_temperature).state + (0.0065 * STANDARD_ALTITUDE) + 273.15)), 5.257);
    update_interval: ${updates}
    unit_of_measurement: "hPa"
    accuracy_decimals: 1
    
  # Wifi signal sensor
  - platform: wifi_signal
    name: ${friendly_name} WiFi Signal
    id: wifi_signal_sensor
    device_class: signal_strength
    update_interval: ${updates}
    
  # Uptime sensor
  - platform: uptime
    name: ${friendly_name} uptime 
    id: uptime_sensor
    update_interval: ${updates}

# Set up text sensors
text_sensor:    

  # Update interval sensor
  - platform: template
    name: ${friendly_name} update interval
    id: update_interval
    lambda: |-
      return {"${updates}"};
    update_interval: ${updates}

# Set up switches
switch:
  
  # Swith to turn on/off load
  - platform: modbus_controller
    modbus_controller_id: epever
    name: ${friendly_name} load on/off
    id: load_onoff
    register_type: coil
    address: 0x0002
    bitmask: 0x1
    on_turn_on:
      - script.execute: update_components
    on_turn_off:
      - script.execute: update_components

  # Switch to restart the device
  - platform: restart
    name: ${friendly_name} restart
    id: restart_switch

# Set up buttons
button:    
  # Button to refresh sensor readings
  - platform: template
    name: ${friendly_name} refresh
    id: refresh_data
    on_press:
      - script.execute: update_components

# Set up scripts
script:

  # Script to update sensor readings
  - id: update_components
    mode: single
    then:
      - component.update: epever
      - component.update: bme280_sensor
      - component.update: ina219_sensor
      #- component.update: scd30_sensor       # Not allowed
      #- lambda: 'id(scd30_sensor).update();' # Does not work
      - component.update: uptime_sensor
      - component.update: wifi_signal_sensor
      - component.update: outside_sea_level_pressure
      - component.update: update_interval
      
